mapc_optimal.main
=================

.. py:module:: mapc_optimal.main


Classes
-------

.. autoapisummary::

   mapc_optimal.main.Main


Module Contents
---------------

.. py:class:: Main(min_throughput, opt_sum, solver)

   The main problem responsible for the selection and time division of configurations
   generated by the pricing problem.

   :param min_throughput: The minimum throughput of each station required when optimizing total throughput.
   :type min_throughput: :class:`float`
   :param opt_sum: If True, the total throughput is optimized, otherwise the worst throughput is optimized.
   :type opt_sum: :class:`bool`
   :param solver: The solver used to solve the optimization problem.
   :type solver: :class:`pulp.LpSolver`


   .. py:attribute:: min_throughput


   .. py:attribute:: opt_sum


   .. py:attribute:: solver


   .. py:method:: __call__(stations, link_node_b, conf_links, conf_link_rates, conf_total_rates, confs)

      Solves the main problem given the configurations generated by the pricing problem.
      Returns the dual variables, the shares of the configurations and the value of the objective function.

      :param stations: List of the station nodes.
      :type stations: :class:`list`
      :param link_node_b: Dictionary containing the mapping of links to the station nodes.
      :type link_node_b: :class:`dict`
      :param conf_links: Dictionary containing the links of each configuration.
      :type conf_links: :class:`dict`
      :param conf_link_rates: Dictionary containing the rates of each link for each configuration.
      :type conf_link_rates: :class:`dict`
      :param conf_total_rates: Dictionary containing the total rate of each configuration.
      :type conf_total_rates: :class:`dict`
      :param confs: List of the configurations.
      :type confs: :class:`list`

      :returns: **result** -- Tuple containing the results of the optimization problem and the value of the objective function.
      :rtype: :class:`tuple[dict`, :class:`float]`



