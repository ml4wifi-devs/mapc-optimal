:py:mod:`mapc_optimal.pricing`
==============================

.. py:module:: mapc_optimal.pricing


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   mapc_optimal.pricing.Pricing




.. py:class:: Pricing(mcs_values, mcs_data_rates, min_sinr, max_tx_power, min_tx_power, noise_floor, opt_sum, solver)


   The pricing problem responsible for proposing new configurations for the main problem.

   :param mcs_values: List of the available MCS values.
   :type mcs_values: :class:`list`
   :param mcs_data_rates: List of the data rates corresponding to the available MCS values.
   :type mcs_data_rates: :class:`list`
   :param min_sinr: Array containing the minimum SINR values for each MCS value.
   :type min_sinr: :class:`NDArray`
   :param max_tx_power: Maximum transmission power of the nodes.
   :type max_tx_power: :class:`float`
   :param min_tx_power: Minimum transmission power of the nodes.
   :type min_tx_power: :class:`float`
   :param noise_floor: Mean level of the noise floor in the network.
   :type noise_floor: :class:`float`
   :param opt_sum: If True, the total throughput is optimized, otherwise the worst throughput is optimized.
   :type opt_sum: :class:`bool`
   :param solver: Solver used to solve the pricing problem.
   :type solver: :class:`pulp.LpSolver`

   .. py:method:: initial_configuration(links, link_path_loss)

      Generates the initial configuration for the solver. The initial configurations are very simple, they contain
      only one link, with the best possible data rate and the maximum transmission power. The initial configurations
      include all the links in the network.

      :param links: List of the links in the network.
      :type links: :class:`list`
      :param link_path_loss: Dictionary containing the path loss of each link.
      :type link_path_loss: :class:`dict`

      :returns: **configuration** -- Dictionary containing the initial configuration.
      :rtype: :class:`dict`


   .. py:method:: __call__(dual_alpha, dual_beta, dual_gamma, stations, access_points, links, link_node_a, link_node_b, link_path_loss, max_interference, configuration)

      Solves the pricing problem given the dual variables of the main problem.
      Returns all the configurations and the value of the objective function.

      :param dual_alpha: Dual variable of the alpha constraint.
      :type dual_alpha: :class:`float`
      :param dual_beta: Dual variables of the beta constraints.
      :type dual_beta: :class:`dict`
      :param dual_gamma: Dual variables of the gamma constraints.
      :type dual_gamma: :class:`dict`
      :param stations: List of the station nodes.
      :type stations: :class:`list`
      :param access_points: List of the access point nodes.
      :type access_points: :class:`list`
      :param links: List of the links in the network.
      :type links: :class:`list`
      :param link_node_a: Dictionary containing the mapping of links to the access point nodes.
      :type link_node_a: :class:`dict`
      :param link_node_b: Dictionary containing the mapping of links to the station nodes.
      :type link_node_b: :class:`dict`
      :param link_path_loss: Dictionary containing the path loss of each link.
      :type link_path_loss: :class:`dict`
      :param max_interference: Dictionary containing the maximum interference level for each link and each MCS value.
      :type max_interference: :class:`dict`
      :param configuration: Dictionary containing all the configurations.
      :type configuration: :class:`dict`

      :returns: **result** -- Tuple containing the dictionary with the new configuration and the value of the objective function.
      :rtype: :class:`tuple[dict`, :class:`float]`



